{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/yahya/Documents/FinalYearProject/tasko/app/components/KanbanBoard.tsx"],"sourcesContent":["\"use client\";\nimport dynamic from 'next/dynamic';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { useState, useEffect } from \"react\";\nimport { TaskState } from \"@prisma/client\";\n\ninterface Task {\n  id: string;\n  text: string;\n  state: TaskState;\n}\n\ninterface Column {\n  id: string;\n  title: string;\n  tasks: Task[];\n}\n\n// Create a client-side only component\nconst KanbanBoardContent = ({ initialTasks }: { initialTasks: Task[] }) => {\n  console.log('KanbanBoard received tasks:', initialTasks);\n  console.log('Task states:', initialTasks?.map(t => t.state));\n  console.log('Filtered ToDo tasks:', initialTasks?.filter(task => task.state === \"ToDo\"));\n  \n  if (!initialTasks?.length) {\n    return <div>Loading tasks...</div>;\n  }\n\n  const [columns, setColumns] = useState<Column[]>(() => ([\n    {\n      id: \"TODO\",\n      title: \"To Do\",\n      tasks: initialTasks.filter(task => task.state === \"ToDo\") || [],\n    },\n    {\n      id: \"IN_PROGRESS\",\n      title: \"In Progress\",\n      tasks: initialTasks.filter(task => task.state === \"InProgress\") || [],\n    },\n    {\n      id: \"COMPLETED\",\n      title: \"Completed\",\n      tasks: initialTasks.filter(task => task.state === \"Completed\") || [],\n    },\n  ]));\n\n  // Add useEffect to update columns when initialTasks changes\n  useEffect(() => {\n    setColumns([\n      {\n        id: \"TODO\",\n        title: \"To Do\",\n        tasks: initialTasks?.filter(task => task.state === \"ToDo\") || [],\n      },\n      {\n        id: \"IN_PROGRESS\",\n        title: \"In Progress\",\n        tasks: initialTasks?.filter(task => task.state === \"InProgress\") || [],\n      },\n      {\n        id: \"COMPLETED\",\n        title: \"Completed\",\n        tasks: initialTasks?.filter(task => task.state === \"Completed\") || [],\n      },\n    ]);\n  }, [initialTasks]);\n\n  const onDragEnd = (result: any) => {\n    const { source, destination } = result;\n\n    // If dropped outside a droppable area\n    if (!destination) return;\n\n    // If dropped in the same position\n    if (\n      source.droppableId === destination.droppableId &&\n      source.index === destination.index\n    ) {\n      return;\n    }\n\n    // Find source and destination columns\n    const sourceColumn = columns.find(col => col.id === source.droppableId);\n    const destColumn = columns.find(col => col.id === destination.droppableId);\n\n    if (!sourceColumn || !destColumn) return;\n\n    // Create new arrays\n    const newSourceTasks = Array.from(sourceColumn.tasks);\n    const newDestTasks = source.droppableId === destination.droppableId\n      ? newSourceTasks\n      : Array.from(destColumn.tasks);\n\n    // Remove task from source\n    const [movedTask] = newSourceTasks.splice(source.index, 1);\n\n    // Add task to destination\n    if (source.droppableId === destination.droppableId) {\n      newSourceTasks.splice(destination.index, 0, movedTask);\n    } else {\n      newDestTasks.splice(destination.index, 0, movedTask);\n    }\n\n    // Update columns state\n    setColumns(prevColumns => \n      prevColumns.map(col => {\n        if (col.id === source.droppableId) {\n          return { ...col, tasks: newSourceTasks };\n        }\n        if (col.id === destination.droppableId) {\n          return { ...col, tasks: newDestTasks };\n        }\n        return col;\n      })\n    );\n  };\n\n  return (\n    <div className=\"flex gap-4 p-4\">\n      <DragDropContext onDragEnd={onDragEnd}>\n        {columns.map(column => (\n          <div key={column.id} className=\"bg-gray-100 p-4 rounded-lg w-80\">\n            <h2 className=\"font-bold mb-4\">{column.title}</h2>\n            <Droppable \n              droppableId={column.id} \n              isDropDisabled={false}\n              isCombineEnabled={false}\n            >\n              {(provided) => (\n                <div\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  className=\"min-h-[500px]\"\n                >\n                  {column.tasks.map((task, index) => (\n                    <Draggable\n                      key={String(task.id)}\n                      draggableId={String(task.id)}\n                      index={index}\n                    >\n                      {(provided) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          className=\"bg-white p-4 mb-2 rounded shadow\"\n                        >\n                          {task.text}\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </div>\n        ))}\n      </DragDropContext>\n    </div>\n  );\n};\n\n// Wrap with dynamic import\nconst KanbanBoard = dynamic(() => Promise.resolve(KanbanBoardContent), { \n  ssr: false \n});\n\nexport default KanbanBoard; "],"names":[],"mappings":"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"}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///Users/yahya/Documents/FinalYearProject/tasko/app/member/page.tsx"],"sourcesContent":["'use client';\nimport KanbanBoard from '@/app/components/KanbanBoard';\nimport { data } from 'autoprefixer';\nimport { useEffect, useState } from 'react';\n\nexport default function MemberPage() {\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    // Fetch tasks\n    const fetchTasks = async () => {\n      const response = await fetch('/api'); \n      const data = await response.json();\n      console.log('Fetched tasks:', data);\n      setTasks(data);\n    };\n\n    fetchTasks();\n  }, []);\n\n  return (\n    <div>\n      <h1 className=\"text-2xl font-bold mb-4\">My Tasks</h1>\n      <KanbanBoard initialTasks={tasks} />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AAEA;;;AAHA;;;AAKe,SAAS;;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAErC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gCAAE;YACR,cAAc;YACd,MAAM;mDAAa;oBACjB,MAAM,WAAW,MAAM,MAAM;oBAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;oBAChC,QAAQ,GAAG,CAAC,kBAAkB;oBAC9B,SAAS;gBACX;;YAEA;QACF;+BAAG,EAAE;IAEL,qBACE,6LAAC;;0BACC,6LAAC;gBAAG,WAAU;0BAA0B;;;;;;0BACxC,6LAAC,oIAAA,CAAA,UAAW;gBAAC,cAAc;;;;;;;;;;;;AAGjC;GArBwB;KAAA"}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}